### 연습문제 6
a <- mpg %>%
filter(class %in% c('compact','subcompact','suv')) %>%
select(class,cty)
ggplot(a, aes(x=class,y=cty ,group=class))+
geom_boxplot(fill=c('Orange red','steel blue','yellow')) +
ggtitle("6번 'compact', 'subcompact', 'suv'의 cty")
### 연습문제 6
a <- mpg %>%
filter(class %in% c('compact','subcompact','suv')) %>%
select(class,cty)
ggplot(a, aes(x=class,y=cty ,group=class,fill=class))+
geom_boxplot() +
ggtitle("6번 'compact', 'subcompact', 'suv'의 cty")
### 연습문제 7
diamonds
# 1)
ggplot(diamonds,aes(x=cut,fill=cut)) +
geom_bar()
# 2) cut에 따른 가격의 변화를 보여주는 그래프
cut <- diamonds %>%
select(cut,price) %>%
group_by(cut) %>%
summarise(price_mean=mean(price,na.rm=T))
ggplot(cut,aes(x=cut,y=price_mean))+
geom_bar(stat="identity",fill=c('Tan1','steel blue','yellow2','green3','pink'),color="black")+
ggtitle("7번(2) cut에 따른 가격의 변화 ")+
ylim(0,5000)
# 3)
### 연습문제 7
diamonds
# 1)
ggplot(diamonds,aes(x=cut,fill=cut)) +
geom_bar(color="black")
# 2) cut에 따른 가격의 변화를 보여주는 그래프
cut <- diamonds %>%
select(cut,price) %>%
group_by(cut) %>%
summarise(price_mean=mean(price,na.rm=T))
ggplot(cut,aes(x=cut,y=price_mean))+
geom_bar(stat="identity",fill=c('Tan1','steel blue','yellow2','green3','pink'),color="black")+
ggtitle("7번(2) cut에 따른 가격의 변화 ")+
ylim(0,5000)
# 3)
### 연습문제 7
diamonds
# 1)
ggplot(diamonds,aes(x=cut,fill=cut)) +
geom_bar(color="black")
# 2) cut에 따른 가격의 변화를 보여주는 그래프
cut <- diamonds %>%
select(cut,price) %>%
group_by(cut) %>%
summarise(price_mean=mean(price,na.rm=T))
ggplot(cut,aes(x=cut,y=price_mean,fill=cut))+
geom_bar(stat="identity",color="black")+
ggtitle("7번(2) cut에 따른 가격의 변화 ")+
ylim(0,5000)
# 3)
### 연습문제 7
diamonds
# 1)
ggplot(diamonds,aes(x=cut,fill=cut)) +
geom_bar(color="black")
# 2) cut에 따른 가격의 변화를 보여주는 그래프
cut <- diamonds %>%
select(cut,price) %>%
group_by(cut) %>%
summarise(price_mean=mean(price,na.rm=T))
ggplot(cut,aes(x=cut,y=price_mean,fill=cut))+
geom_bar(stat="identity",color="black")+
ggtitle("7번(2) cut에 따른 가격의 변화 ")+
ylim(0,5000)
# 3)
ggplot(diamonds,aes(x=cut,fill=cut)) +
geom_bar(color="black")
### 연습문제 2
midwest2 <- midwest %>% filter(poptotal<=500000,popasian<=10000)
ggplot(midwest2,aes(x=poptotal,y=popasian))+
geom_point(color='steel blue',size=2)+
ggtitle('2번 \n전체인구 50만 이하 \n아시아인 인구 1만 이하인 지역')
color <- diamonds %>%
select(color,price) %>%
group_by(color) %>%
summarise(price_mean=mean(price,na.rm=T))
ggplot(color,aes(x=color,y=price_mean,fill=cut))+
geom_bar(stat="identity",color="black")
color <- diamonds %>%
select(color,price) %>%
group_by(color) %>%
summarise(price_mean=mean(price,na.rm=T))
color
ggplot(color,aes(x=color,y=price_mean,fill=color))+
geom_bar(stat="identity",color="black")
cut <- diamonds %>%
select(cut,price) %>%
group_by(cut) %>%
summarise(price_mean=mean(price,na.rm=T))
cut2 <- ggplot(cut,aes(x=cut,y=price_mean,fill=cut))+
geom_bar(stat="identity",color="black")+
ylim(0,5000)
color <- diamonds %>%
select(color,price) %>%
group_by(color) %>%
summarise(price_mean=mean(price,na.rm=T))
color2 <- ggplot(color,aes(x=color,y=price_mean,fill=color))+
geom_bar(stat="identity",color="black")
grid.arrange(cut2,color2,ncol=2, top="cut 과 color")
grid.arrange(cut2,color2,ncol=2, top="cut 과 color")
library(KoNLP)
library(wordcloud)
library(rJava)
install.packages('rJava')
library(rJava)
useSejongDic() #한글에 저장되어 있는 세종사전 사용함을 알려줌.
useSejongDic() #한글에 저장되어 있는 세종사전 사용함을 알려줌.
library(KoNLP)
library(wordcloud)
library(rJava)
useSejongDic() #한글에 저장되어 있는 세종사전 사용함을 알려줌.
library(KoNLP)
library(wordcloud)
library(rJava)
useSejongDic()
setwd("D:/dudwlsrla92/Assignment/[과제 4] 워드클라우드")
getwd()
data1 <- readLines("응답소_2015_01.txt")
data2 <- readLines("응답소_2015_02.txt")
data3 <- readLines("응답소_2015_03.txt")
data4 <- readLines("응답소_2015_04.txt")
data5 <- readLines("응답소_2015_05.txt")
total <- c('data1','data2','data3','data4','data5')
str(total)
total <- c(data1,data2,data3,data4,data5)
str(total)
head(total,10)
total <- c(data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12)
data2 <- readLines("응답소_2015_02.txt")
data3 <- readLines("응답소_2015_03.txt")
data4 <- readLines("응답소_2015_04.txt")
data5 <- readLines("응답소_2015_05.txt")
data6 <- readLines("응답소_2015_06.txt")
data7 <- readLines("응답소_2015_07.txt")
data8 <- readLines("응답소_2015_08.txt")
data9 <- readLines("응답소_2015_09.txt")
data10 <- readLines("응답소_2015_10.txt")
data11 <- readLines("응답소_2015_11.txt")
data12 <- readLines("응답소_2015_12.txt")
total <- c(data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12)
data1 <- readLines("응답소_2015_01.txt")
data2 <- readLines("응답소_2015_02.txt")
data3 <- readLines("응답소_2015_03.txt")
data4 <- readLines("응답소_2015_04.txt")
data5 <- readLines("응답소_2015_05.txt")
data6 <- readLines("응답소_2015_06.txt")
data7 <- readLines("응답소_2015_07.txt")
data8 <- readLines("응답소_2015_08.txt")
data9 <- readLines("응답소_2015_09.txt")
data10 <- readLines("응답소_2015_10.txt")
data11 <- readLines("응답소_2015_11.txt")
data12 <- readLines("응답소_2015_12.txt")
total <- c(data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12)
str(total)
head(total,10)
total1 <- sapply(total,extractNoun, USE.NAMES = F)
library(KoNLP)
library(wordcloud)
library(rJava)
library(RColorBrewer)
library(stringr)
library(dplyr)
library(extrafont)
total1 <- sapply(total,extractNoun, USE.NAMES = F)
total2 <- unlist(total1)
total3   <- str_replace_all(total2,"[^[:alpha:]]","")
total3   <- gsub(" ","",total3)
txt     <- readLines("응답소gsub.txt")
cnt_txt <- length(txt)
i <- 1
for(i in 1:cnt_txt){
total3 <- gsub((txt[i]),"",total3)
}
total3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 5 },total3)
write(unlist(total3),"응답소total2.txt")
rev   <- read.table("응답소total2.txt")
nrow(rev)
wordcount <- table(rev)
head(sort(wordcount, decreasing=T),30)
# 9는 사용할 색상개수, 색상타입이름.
palete <- brewer.pal(9,"Set3")
pal <- brewer.pal(5,"YlGn")
pal1<- brewer.pal(7,"YlOrRd")
green <- brewer.pal(6,"RdYlGn")
red <- brewer.pal(7,"YlOrRd")
blue <- brewer.pal(6,"Blues")
set <- brewer.pal(7, "Set3")
pp <- brewer.pal(7,"RdYlGn")
windowsFonts(baedal=windowsFont("배달의민족 도현"))
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.1,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.1,1,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.01,0.99,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal")
legend(0.01,0.99,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
legend(0.1,0.99,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
.family="baedal")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal")
legend(0.2,0.99,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal")
legend(0.2,0.99,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal")
legend(0.2,0.99,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal")
legend(0.2,1,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(3,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal")
legend(0.2,1,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
data1 <- readLines("응답소_2015_01.txt")
data2 <- readLines("응답소_2015_02.txt")
data3 <- readLines("응답소_2015_03.txt")
data4 <- readLines("응답소_2015_04.txt")
data5 <- readLines("응답소_2015_05.txt")
data6 <- readLines("응답소_2015_06.txt")
data7 <- readLines("응답소_2015_07.txt")
data8 <- readLines("응답소_2015_08.txt")
data9 <- readLines("응답소_2015_09.txt")
data10 <- readLines("응답소_2015_10.txt")
data11 <- readLines("응답소_2015_11.txt")
data12 <- readLines("응답소_2015_12.txt")
total <- c(data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12)
str(total)
head(total,10)
i <- 1
for(i in 1:cnt_txt){
total3 <- gsub((txt[i]),"",total3)
}
total3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 5 },total3)
for (i in 1:100){
sum <- sum + i
}
#1에서 100까지 더한 수
sum <- 0
for (i in 1:100){
sum <- sum + i
}
#1에서 100까지 더한 수
sum <- 0
for (i in 1:100){
sum <- sum + i
}
txt     <- readLines("응답소gsub.txt")
for(i in 1:length(txt)){
total3 <- gsub((txt[i]),"",total3)
}
total3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 5 },total3)
write(unlist(total3),"응답소total2.txt")
rev   <- read.table("응답소total2.txt")
nrow(rev)
wordcount <- table(rev)
head(sort(wordcount, decreasing=T),30)
# 9는 사용할 색상개수, 색상타입이름.
palete <- brewer.pal(9,"Set3")
pal <- brewer.pal(5,"YlGn")
pal1<- brewer.pal(7,"YlOrRd")
green <- brewer.pal(6,"RdYlGn")
red <- brewer.pal(7,"YlOrRd")
blue <- brewer.pal(6,"Blues")
set <- brewer.pal(7, "Set3")
pp <- brewer.pal(7,"RdYlGn")
windowsFonts(baedal=windowsFont("배달의민족 도현"))
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(3,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal")
legend(0.2,1,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
knitr::opts_chunk$set(echo = TRUE)
txt     <- readLines("응답소gsub.txt")
for(i in 1:length(txt)){
total3 <- gsub((txt[i]),"",total3)
}
total3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 5 },total3)
write(unlist(total3),"응답소total2.txt")
rev   <- read.table("응답소total2.txt")
View(x)
total3    <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 5 },total3)
txt     <- readLines("응답소gsub.txt")
for(i in 1:length(txt)){
total3 <- gsub((txt[i]),"",total3)
}
for(i in 1:length(txt)){
total3 <- gsub((txt[i]),"",total3)
}
total3    <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 5 },total3)
for(i in 1:length(txt)){
total3 <- gsub((txt[i]),"",total3)
}
total3    <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 5 },total3)
wordcount <- total
wordcount <- total3
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal")
total <- c(data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12)
total1 <- sapply(total,extractNoun, USE.NAMES = F)
total1 <- sapply(total,extractNoun, USE.NAMES = F)
total2 <- unlist(total1)
total3   <- str_replace_all(total2,"[^[:alpha:]]","")
total3   <- gsub(" ","",total3)
txt     <- readLines("응답소gsub.txt")
for(i in 1:length(txt)){
total3 <- gsub((txt[i]),"",total3)
}
total3    <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 5 },total3)
wordcount <- total3
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal")
