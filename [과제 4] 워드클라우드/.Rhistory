data3 <- rename(data3, V1 = data3)
data4 <- readLines("응답소_2015_04.txt")
data4 <- as.data.frame(data4, stringsAsFactors = F)
data4 <- rename(data4, V1 = data4)
data5 <- readLines("응답소_2015_05.txt")
data5 <- as.data.frame(data4, stringsAsFactors = F)
data5 <- rename(data5, V1 = data5)
data6 <- readLines("응답소_2015_06.txt")
data6 <- as.data.frame(data6, stringsAsFactors = F)
data6 <- rename(data6, V1 = data6)
data5 <- readLines("응답소_2015_05.txt")
data5 <- as.data.frame(data5, stringsAsFactors = F)
data5 <- rename(data5, V1 = data5)
data6 <- readLines("응답소_2015_06.txt")
data6 <- as.data.frame(data6, stringsAsFactors = F)
data6 <- rename(data6, V1 = data6)
data7 <- readLines("응답소_2015_07.txt")
data7 <- as.data.frame(data7, stringsAsFactors = F)
data7 <- rename(data7, V1 = data7)
data8 <- readLines("응답소_2015_08.txt")
data8 <- as.data.frame(data8, stringsAsFactors = F)
data8 <- rename(data8, V1 = data8)
data9 <- readLines("응답소_2015_09.txt")
data9 <- as.data.frame(data9, stringsAsFactors = F)
data9 <- rename(data9, V1 = data9)
data10 <- readLines("응답소_2015_10.txt")
data10 <- as.data.frame(data10, stringsAsFactors = F)
data10 <- rename(data10, V1 = data10)
data11 <- readLines("응답소_2015_11.txt")
data11 <- as.data.frame(data11, stringsAsFactors = F)
data11 <- rename(data11, V1 = data11)
data12 <- readLines("응답소_2015_12.txt")
data12 <- as.data.frame(data12, stringsAsFactors = F)
data12 <- rename(data12, V1 = data12)
total <- rbind(data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12)
write(unlist(total),"응답소total.txt")
total <- read.table('응답소total.txt')
total <- rbind(data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12)
View(total)
total1 <- sapply(total,extractNoun, USE.NAMES = F)
View(total1)
total2 <- unlist(total2)
total2 <- unlist(total1)
View(total2)
write(unlist(total2),"응답소total.txt")
total3 <- read.table('응답소total.txt')
total2 <- unlist(total1)
write(unlist(total2),"응답소total.txt")
total3 <- read.table('응답소total.txt')
View(total2)
View(total3)
total3   <- str_replace_all(total2,"[^[:alpha:]]","")
total1 <- sapply(total,extractNoun, USE.NAMES = F)
total2 <- unlist(total1)
total3   <- str_replace_all(total2,"[^[:alpha:]]","")
total3   <- gsub(" ","",total3)
total3   <- str_replace_all(total2,"[^[:alpha:]]","")
total3   <- gsub(" ","",total3)
# 3. gsub 파일로 삭제하기.
txt     <- readLines("응답소gsub.txt")
cnt_txt <- length(txt)
# 3. gsub 파일로 삭제하기.
txt     <- readLines("응답소gsub.txt")
# 3. gsub 파일로 삭제하기.
txt     <- readLines("응답소gsub.txt")
total3   <- str_replace_all(total2,"[^[:alpha:]]","")
total3   <- gsub(" ","",total3)
# 3. gsub 파일로 삭제하기.
txt     <- readLines("응답소gsub.txt")
cnt_txt <- length(txt)
# 3. gsub 파일로 삭제하기.
txt     <- readLines("응답소gsub.txt")
total3   <- str_replace_all(total2,"[^[:alpha:]]","")
total3   <- gsub(" ","",total3)
# 3. gsub 파일로 삭제하기.
txt     <- readLines("응답소gsub.txt")
View(data6)
total3   <- str_replace_all(total2,"[^[:alpha:]]","")
total3   <- gsub(" ","",total3)
# 3. gsub 파일로 삭제하기.
txt     <- readLines("응답소gsub.txt")
cnt_txt <- length(txt)
# 3. gsub 파일로 삭제하기.
txt     <- readLines("응답소gsub.txt")
cnt_txt <- length(txt)
i <- 1
for(i in 1:cnt_txt){
total3 <- gsub((txt[i]),"",total3)
}
total3
total3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 5 },total3)
write(unlist(total3),"응답소total2.txt")
rev   <- read.table("응답소total2.txt")
nrow(rev)
wordcount <- table(rev)
head(sort(wordcount, decreasing=T),30)
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(4,0.5),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=100,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=T,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.3,0.9,"제주도 추천여행 코스 분석.",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
palete <- brewer.pal(9,"Set3") # 9는 사용할 색상개수, 색상타입이름.
windowsFonts(baedal=windowsFont("배달의민족 도현"))
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(3,1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=100,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal")
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(3,0.5),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=100,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(5,0.5),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal")
# 3. gsub 파일로 삭제하기.
txt     <- readLines("응답소gsub.txt")
cnt_txt <- length(txt)
i <- 1
for(i in 1:cnt_txt){
total3 <- gsub((txt[i]),"",total3)
}
total3
total3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 5 },total3)
write(unlist(total3),"응답소total2.txt")
rev   <- read.table("응답소total2.txt")
nrow(rev)
wordcount <- table(rev)
head(sort(wordcount, decreasing=T),30)
# 3. gsub 파일로 삭제하기.
txt     <- readLines("응답소gsub.txt")
cnt_txt <- length(txt)
i <- 1
for(i in 1:cnt_txt){
total3 <- gsub((txt[i]),"",total3)
}
total3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 5 },total3)
write(unlist(total3),"응답소total2.txt")
rev   <- read.table("응답소total2.txt")
nrow(rev)
wordcount <- table(rev)
head(sort(wordcount, decreasing=T),30)
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(4,0.5),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=T,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.3,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(4,0.5),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=T,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.3,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(3,0.5),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=T,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.3,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(10,0.5),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=T,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.3,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2,0.05),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=T,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.3,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2,0.05),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=T,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.2,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2,0.05),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=T,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.35,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2,0.05),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=T,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.3,1,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2,0.05),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=T,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.29,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2,0.05),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.29,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.05),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.3,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.25),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.3,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.3,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend('topleft',"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(topleft,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend('topleft',"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal") +
legend(0.1,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
knitr::opts_chunk$set(echo = TRUE)
par(bg="black")
wordcloud(names(wordcount),
freq=wordcount,   #
scale=c(2.5,0.1),   # 빈도가 가장 큰 단어와 가장 빈도가 작은 단어 폰트 사이 크기
rot.per=0.25,     # 90도 회정해서 보여줄 단어 비율.
min.freq=1,       # 이 값 이상 언급된 단어만 출력.
max.words=1000,    # 빈도 3이상 100미만 단어 표현.
random.order=F,   # (F)빈도가 큰 단어를 중앙에 두도록 함.
random.color=F,   # (T)색상랜덤/(F)빈도수순으로 색상표현.
colors=palete,
family="baedal")
legend(0.1,0.9,"서울시 응답소 2015",
cex=0.8,
fill='black',
border=NA,
bg="white",
text.col="red",
text.font=2,
box.col="red")
